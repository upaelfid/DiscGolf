@model DiscGolf.Models.Stats

@{
    ViewBag.Title = User.Identity.Name +" Stats";

    var stats =(from m in Model.myStats
            select m);


    var players = (from r in Model.myStats
                   where r.Id != 1 && r.Id != 2 && r.Id != 31 && r.h18 != 0
                   select new { Name = r.Name, pSum = r.h1 + r.h2 + r.h3 + r.h4 + r.h5 + r.h6 + r.h7 + r.h8 + r.h9 + r.h10 + r.h11 + r.h12 + r.h13 + r.h14 + r.h15 + r.h16 + r.h17 + r.h18, r.Id, r.ccID }).Distinct().ToList();

    var scores = (from r in Model.myStats
                  where r.Id != 1 && r.Id != 2 && r.Id != 31 && r.h18 != 0 && User.Identity.Name == r.Name
                  select new { Name = r.Name, pSum = r.h1 + r.h2 + r.h3 + r.h4 + r.h5 + r.h6 + r.h7 + r.h8 + r.h9 + r.h10 + r.h11 + r.h12 + r.h13 + r.h14 + r.h15 + r.h16 + r.h17 + r.h18, r.Id, r.gDate }).Distinct().ToList();

            
    var maxC = (from r in players
             group r by new { r.Name, r.Id, r.ccID } into grp
             let MaxC = grp.Max(r => r.pSum)
             from x in grp
             where x.pSum == MaxC
             select x).ToList();

    var avgC = (from r in players
                group r by new { r.Name, r.Id, r.ccID } into grp
                let MaxC = grp.Average(r => r.pSum)
                from x in grp
                where x.pSum == MaxC
                select x).ToList();


    List<String> _xval = new List<String> { };
    foreach (var x in scores)
    {
        _xval.Add(String.Format("{0:MM dd yyyy}", x.gDate));
    }
    ViewBag.labels = _xval.ToArray();
    List<int> _yval = new List<int> { };
    foreach (var x in scores)
    {
        _yval.Add(x.pSum);
    }
    ViewBag.series = _yval.ToArray();     

}
@section scriptsh{
    <script src="http://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"></script>
    <script type="text/javascript">
    	    $(document).ready(function () {

    	        var chart = new Chartist.Line('.ct-chart', {
    	            labels: [@Html.Raw("'" + string.Join("', '", (string[])ViewBag.labels) + "'")],
    	            series: [

                      [ @(string.Join(", ", (int[])ViewBag.series))]
    	            ]
    	        }, {
    	            low: 0,
					  axisX: {
    offset: 60
  }
    	        });

    	        // Let's put a sequence number aside so we can use it in the event callbacks
    	        var seq = 0,
                  delays = 80,
                  durations = 500;

    	        // Once the chart is fully created we reset the sequence
    	        chart.on('created', function () {
    	            seq = 0;
    	        });

    	        // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
    	        chart.on('draw', function (data) {
    	            seq++;

    	            if (data.type === 'line') {
    	                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
    	                data.element.animate({
    	                    opacity: {
    	                        // The delay when we like to start the animation
    	                        begin: seq * delays + 1000,
    	                        // Duration of the animation
    	                        dur: durations,
    	                        // The value where the animation should start
    	                        from: 0,
    	                        // The value where it should end
    	                        to: 1
    	                    }
    	                });
    	            } else if (data.type === 'label' && data.axis === 'x') {
    	                data.element.animate({
    	                    y: {
    	                        begin: seq * delays,
    	                        dur: durations,
    	                        from: data.y + 100,
    	                        to: data.y,
    	                        // We can specify an easing function from Chartist.Svg.Easing
    	                        easing: 'easeInOutBack'
    	                    }
    	                });
    	            } else if (data.type === 'label' && data.axis === 'y') {
    	                data.element.animate({
    	                    x: {
    	                        begin: seq * delays,
    	                        dur: durations,
    	                        from: data.x - 100,
    	                        to: data.x,
    	                        easing: 'easeInOutBack'
    	                    }
    	                });
    	            } else if (data.type === 'point') {
    	                data.element.animate({
    	                    x1: {
    	                        begin: seq * delays,
    	                        dur: durations,
    	                        from: data.x - 10,
    	                        to: data.x,
    	                        easing: 'easeOutQuart'
    	                    },
    	                    x2: {
    	                        begin: seq * delays,
    	                        dur: durations,
    	                        from: data.x - 10,
    	                        to: data.x,
    	                        easing: 'easeOutQuart'
    	                    },
    	                    opacity: {
    	                        begin: seq * delays,
    	                        dur: durations,
    	                        from: 0,
    	                        to: 1,
    	                        easing: 'easeOutQuart'
    	                    }
    	                });
    	            } else if (data.type === 'grid') {
    	                // Using data.axis we get x or y which we can use to construct our animation definition objects
    	                var pos1Animation = {
    	                    begin: seq * delays,
    	                    dur: durations,
    	                    from: data[data.axis + '1'] - 30,
    	                    to: data[data.axis + '1'],
    	                    easing: 'easeOutQuart'
    	                };

    	                var pos2Animation = {
    	                    begin: seq * delays,
    	                    dur: durations,
    	                    from: data[data.axis + '2'] - 100,
    	                    to: data[data.axis + '2'],
    	                    easing: 'easeOutQuart'
    	                };

    	                var animations = {};
    	                animations[data.axis + '1'] = pos1Animation;
    	                animations[data.axis + '2'] = pos2Animation;
    	                animations['opacity'] = {
    	                    begin: seq * delays,
    	                    dur: durations,
    	                    from: 0,
    	                    to: 1,
    	                    easing: 'easeOutQuart'
    	                };

    	                data.element.animate(animations);
    	            }
    	        });



    	    });
</script>	
}

<h2>@ViewBag.Title</h2>
@*<img src='@Url.Action("Graph")'  />*@
<div class="ct-chart ct-minor-seventh"></div>
@*@foreach(var s in avgC)
{
 <table>
        <tr class="hole">
            <th colspan="11" style="margin-top: 4em;">
                @s.Name, @ViewBag.Chartist
            </th>
        </tr>
        <tr>
            <td rowspan="2" style="width: 20%; font-weight: bolder; font-size: 3em;"  class="hole">
            @s.pSum
            </td>
              <td rowspan="2" style="width: 20%; font-weight: bolder; font-size: 3em;"  class="hole">
               @s.ccID
            </td>
            <td rowspan="2" style="width: 20%; font-weight: bolder; font-size: 3em;"  class="hole">
@s.Id
            </td>

            
        </tr>
</table>
}*@